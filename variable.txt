- 전역변수의 문제점 

변수는 자신이 선언된 위치에서 생성되고 소면한다. 변수 선언은 선언문이 어디에 있든 상관없이 가장 먼저 실행된다. 
순차적으로 실행되는 시점인 런타임에 실행되는 것이 아니라 이전 단계에서 자바스크립트 엔진에 의해 실행된다. 

변수 내부에서 선언된 지역변수느느 함수가 생성한 스코프에 등록된다. 함수가 생성한 스코프는 렉시컬 환경이라고 부르는 물리적 실체가 있다.
따라서 변수는 자신이 등록된 스코프가 소멸(메모리 해제)될 때까지 유효하다. 
할당된 메모리 공간은 더 이상 참조하지 않을 때 가비지 콜렉터에 의해 해제 되어 가용 메모리 풀에 반환된다. 

호이스팅은 스코프 단위로 동작한다. 변수선언이 스코프의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징
* 전역변수의 호이스팅은 전역변수의 선언이 전역 스코프의 선두로 끌어 올려진 것처럼 동작한다.  전역변수는 전역 전체에서 유효하다. 
* 지역변수의 호이스팅은 지역변수의 선언이 지역 스코프의 선두로 끌어 올려진 것처럼 동작한다.  지역변수는 함수 전체에서 유효하다. 

- 전역 변수의 생명주기 
* 전역객체 : 코드가 실행되기 이전 단계에서 자바스크립트 엔진에 의해 어떤 객체 보다도 먼저 생성되는 특수한 객체

- 전역변수의 문제점 
암묵적 결합: 전역 변수를 선언한 의도는 코드 어디서든 참조, 할당할 수 있는 변수를 사용하는 것이다. 
    이는 모든 코드가 전역 변수를 참조하고 변경할 수 있는 암묵적 결합을 허용하는 것이다. 
    변수의 유효범위가 클수록 가독성이 떨어지고 상태가 변경될 수 있는 위험성이 높다. 
긴 생명주기 : 전역 변수는 생명주기가 길다. 메모리 리소스도 오랜 시간 소비한다. 중복될 경우 의도치 않게 재할당이 이뤄진다. 
스코프 체인상에서 종점에 존재: 전역 변수의 검색속도가 가장 느리다. 
네임스페이스오염: 파일이 분리되어 있다고 해도 하나의 전역 스코프를 공유한다. 예상치 못한 결과를 가져올 수 있다. 

- 전역변수의 사용을 억제하는 방법
전역변수를 반드시 사용해야할 이유를 찾지 못한다면 지역변수를 사용하는 것이 좋다. 변수의 스코프는 좁을수록 좋다. 

- 즉시 실행함수 
모든 코드를 즉시실행함수로 감싸면 모든 변수는 즉시 실행함수의 지역변수가 된다. 

-네임스페이스 객체 
전역에 네임스페이스 역할을 담당할 객체를 생성하고 전역변수처럼 사용하고 싶은 변수를 프로퍼티로 추가하는 방법이다. 

-모듈 패턴
모튤패턴은 클래스 모방에 있어서 관련있는 변수와 함수를 모아 즉시실행함수로 감싸 하나의 모듈을 만든다. 
특징: 전역 변수의 억제는 물론 캡슐화 구현가능하다. 


-es6모듈
ES6 모듈을 사용하면 전역변수를 사용할 수 없다. 파일 자체의 독자적인 모튤 스코프를 제공한다.


